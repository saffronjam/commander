// Code generated by tygo. DO NOT EDIT.

//////////
// source: api_status.go

export interface SatisfactoryApiStatus {
  running: boolean;
  pingMs: number /* int */;
}

//////////
// source: circuit.go

export interface CircuitConsumption {
  total: number /* float64 */;
  max: number /* float64 */;
}
export interface CircuitProduction {
  total: number /* float64 */;
}
export interface CircuitCapacity {
  total: number /* float64 */;
}
export interface CircuitBattery {
  percentage: number /* float64 */;
  capacity: number /* float64 */;
  differential: number /* float64 */;
  untilFull: number /* float64 */; // parsed from 00:00:00 to float64
  untilEmpty: number /* float64 */; // parsed from 00:00:00 to float64
}
export interface Circuit {
  id: string;
  fuseTriggered: boolean;
  consumption: CircuitConsumption;
  production: CircuitProduction;
  capacity: CircuitCapacity;
  battery: CircuitBattery;
}

//////////
// source: drone.go

export type DroneStatus = string;
export const DroneStatusIdle: DroneStatus = "idle";
export const DroneStatusFlying: DroneStatus = "flying";
export const DroneStatusDocking: DroneStatus = "docking";
export interface Drone extends Partial<Location> {
  name: string;
  speed: number /* float64 */;
  status: DroneStatus;
  home: DroneStation;
  paired?: DroneStation;
  destination?: DroneStation;
}

//////////
// source: drone_station.go

export interface DroneStation extends Location {
  name: string;
  fuelName?: string;
}

//////////
// source: dto.go

export type SatisfactoryApiStatusDTO = SatisfactoryApiStatus;
export type CircuitDTO = Circuit;
export type DroneDTO = Drone;
export type DroneStationDTO = DroneStation;
export type FactoryStatsDTO = FactoryStats;
export type GeneratorStatsDTO = GeneratorStats;
export type MachineDTO = Machine;
export type MachineProdStatsDTO = MachineProdStats;
export type PlayerDTO = Player;
export type ProdStatsDTO = ProdStats;
export type SinkStatsDTO = SinkStats;
export type TrainDTO = Train;
export type TrainStationDTO = TrainStation;
export type StateDTO = State;
export interface TrainSetupDTO {
  trains: TrainDTO[];
  trainStations: TrainStationDTO[];
}
export interface DroneSetupDTO {
  drones: DroneDTO[];
  droneStations: DroneStationDTO[];
}

//////////
// source: error.go

export interface BindingError {
  validationErrors: { [key: string]: string[]};
}
export interface ErrorResponse {
  errors: ApiError[];
}
export interface ApiError {
  code: string;
  msg: string;
}

//////////
// source: factory_stats.go

export interface MachineEfficiency {
  machinesOperating: number /* int */;
  machinesIdle: number /* int */;
  machinesPaused: number /* int */;
}
export interface FactoryStats {
  totalMachines: number /* int */;
  efficiency: MachineEfficiency;
  machines: Machine[];
}

//////////
// source: generator_stats.go

export type PowerType = string;
export const PowerTypeBiomass: PowerType = "biomass";
export const PowerTypeCoal: PowerType = "coal";
export const PowerTypeFuel: PowerType = "fuel";
export const PowerTypeGeothermal: PowerType = "geothermal";
export const PowerTypeNuclear: PowerType = "nuclear";
export interface PowerSource {
  count: number /* int */;
  totalProduction: number /* float64 */;
}
export interface GeneratorStats {
  sources: { [key: PowerType]: PowerSource};
  machines: Machine[];
}

//////////
// source: item_stats.go

export interface ItemStats {
  name: string;
  count: number /* float64 */;
}

//////////
// source: location.go

export interface Location {
  x: number /* float64 */;
  y: number /* float64 */;
  z: number /* float64 */;
  rotation: number /* float64 */;
}

//////////
// source: machine.go

export type MachineType = string;
export const MachineTypeAssembler: MachineType = "assembler";
export const MachineTypeConstructor: MachineType = "constructor";
export const MachineTypeFoundry: MachineType = "foundry";
export const MachineTypeManufacturer: MachineType = "manufacturer";
export const MachineTypeRefinery: MachineType = "refinery";
export const MachineTypeSmelter: MachineType = "smelter";
export const MachineTypeBlender: MachineType = "blender";
export const MachineTypePackager: MachineType = "packager";
export const MachineTypeParticleAccelerator: MachineType = "particleAccelerator";
export const MachineTypeMiner: MachineType = "miner";
export const MachineTypeOilExtractor: MachineType = "oilExtractor";
export const MachineTypeWaterExtractor: MachineType = "waterExtractor";
export const MachineTypeBiomassBurner: MachineType = "biomassBurner";
export const MachineTypeCoalGenerator: MachineType = "coalGenerator";
export const MachineTypeFuelGenerator: MachineType = "fuelGenerator";
export const MachineTypeGeothermalGenerator: MachineType = "geothermalGenerator";
export const MachineTypeNuclearPowerPlant: MachineType = "nuclearPowerPlant";
export type MachineCategory = string;
export const MachineCategoryFactory: MachineCategory = "factory";
export const MachineCategoryExtractor: MachineCategory = "extractor";
export const MachineCategoryGenerator: MachineCategory = "generator";
export type MachineStatus = string;
export const MachineStatusOperating: MachineStatus = "operating";
export const MachineStatusIdle: MachineStatus = "idle";
export const MachineStatusPaused: MachineStatus = "paused";
export const MachineStatusUnconfigured: MachineStatus = "unconfigured";
export const MachineStatusUnknown: MachineStatus = "unknown";
export interface MachineProdStats {
  name: string;
  stored: number /* float64 */;
  current: number /* float64 */;
  max: number /* float64 */;
  efficiency: number /* float64 */;
}
export interface Machine extends Location {
  type: MachineType;
  status: MachineStatus;
  category: MachineCategory;
  input: MachineProdStats[];
  output: MachineProdStats[];
}

//////////
// source: player.go

export interface Player {
  id: string;
  name: string;
  health: number /* float64 */;
  items: ItemStats[];
}

//////////
// source: prod_stats.go

export interface ItemProdStats extends ItemStats {
  producedPerMinute: number /* float64 */;
  maxProducePerMinute: number /* float64 */;
  produceEfficiency: number /* float64 */;
  consumedPerMinute: number /* float64 */;
  maxConsumePerMinute: number /* float64 */;
  consumeEfficiency: number /* float64 */;
  minable: boolean;
}
export interface ProdStats {
  minableProducedPerMinute: number /* float64 */;
  minableConsumedPerMinute: number /* float64 */;
  itemsProducedPerMinute: number /* float64 */;
  itemsConsumedPerMinute: number /* float64 */;
  items: ItemProdStats[];
}

//////////
// source: satisfactory_event.go

export type SatisfactoryEventType = string;
export const SatisfactoryEventApiStatus: SatisfactoryEventType = "satisfactoryApiCheck";
export const SatisfactoryEventCircuits: SatisfactoryEventType = "circuits";
export const SatisfactoryEventFactoryStats: SatisfactoryEventType = "factoryStats";
export const SatisfactoryEventProdStats: SatisfactoryEventType = "prodStats";
export const SatisfactoryEventSinkStats: SatisfactoryEventType = "sinkStats";
export const SatisfactoryEventPlayers: SatisfactoryEventType = "players";
export const SatisfactoryEventGeneratorStats: SatisfactoryEventType = "generatorStats";
export const SatisfactoryEventTrains: SatisfactoryEventType = "trains";
export const SatisfactoryEventTrainStations: SatisfactoryEventType = "trainsStations";
export const SatisfactoryEventTrainSetup: SatisfactoryEventType = "trainSetup";
export const SatisfactoryEventDrones: SatisfactoryEventType = "drones";
export const SatisfactoryEventDroneStations: SatisfactoryEventType = "droneStations";
export const SatisfactoryEventDroneSetup: SatisfactoryEventType = "droneSetup";
export const SatisfactoryEventKey: string = "satisfactory_events";
export interface SatisfactoryEvent {
  type: SatisfactoryEventType;
  data: any;
}
export interface SseSatisfactoryEvent extends SatisfactoryEvent {
  clientId: number /* int64 */;
}

//////////
// source: sink_stats.go

export interface SinkStats {
  totalPoints: number /* float64 */;
  coupons: number /* int */;
  nextCouponProgress: number /* float64 */;
  pointsPerMinute: number /* float64 */;
}

//////////
// source: state.go

export interface State {
  satisfactoryApiStatus: SatisfactoryApiStatus;
  factoryStats: FactoryStats;
  prodStats: ProdStats;
  generatorStats: GeneratorStats;
  sinkStats: SinkStats;
  circuits: Circuit[];
  players: Player[];
  drones: Drone[];
  trains: Train[];
  trainStations: TrainStation[];
  droneStations: DroneStation[];
}

//////////
// source: train.go

export type TrainType = string;
export const TrainTypeFreight: TrainType = "freight";
export const TrainTypeLocomotive: TrainType = "locomotive";
export type TrainStatus = string;
export const TrainStatusSelfDriving: TrainStatus = "selfDriving";
export const TrainStatusManual: TrainStatus = "manualDriving";
export const TrainStatusParked: TrainStatus = "parked";
export const TrainStatusDocking: TrainStatus = "docking";
export const TrainStatusDerailed: TrainStatus = "derailed";
export interface TrainVehicle {
  type: TrainType;
  capacity: number /* float64 */;
  inventory: ItemStats[];
}
export interface TrainTimetableEntry {
  station: string;
}
export interface Train extends Location {
  name: string;
  speed: number /* float64 */;
  status: TrainStatus;
  powerConsumption: number /* float64 */;
  vehicles: TrainVehicle[];
  timetable: TrainTimetableEntry[];
  timetableIndex: number /* int */;
}

//////////
// source: train_station.go

export interface TrainStation extends Location {
  name: string;
}
